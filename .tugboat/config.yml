services:
  php:
    # Use PHP 7.2 with Apache to serve the Drupal site
    image: tugboatqa/php:7.2-apache

    # Set this as the default service. This does a few things
    #   1. Clones the git repository into the service container
    #   2. Exposes port 80 to the Tugboat HTTP proxy
    #   3. Routes requests to the preview URL to this service
    default: true

    # Wait until the mysql service is done building
    depends: mysql

    # A set of commands to run while building this service
    commands:
      # Commands that set up the basic preview infrastructure
      init:
        - apt-get update
        # Install bz2 and zip extensions
        - apt-get install -y libbz2-dev
        - docker-php-ext-install opcache bz2 zip
        # Enable headers
        - a2enmod headers rewrite

#       # Install drush-launcher
        - wget -O /usr/local/bin/drush
          https://github.com/drush-ops/drush-launcher/releases/download/0.6.0/drush.phar
        - chmod +x /usr/local/bin/drush

        # Build the site
        - composer create-project govcms/govcms8-project govcms --stability dev --no-interaction
        - ln -snf "${TUGBOAT_ROOT}/govcms/docroot" "${DOCROOT}"
        - ls -al ${DOCROOT}
        - ls -al /var/lib/tugboat/govcms/docroot
        - ls -al ${TUGBOAT_ROOT}

        - # Use the tugboat-specific Drupal settings
        - # cp "${TUGBOAT_ROOT}/.tugboat/settings.php" "${DOCROOT}/sites/default/"

        - # use the latest version of the theme branch as the default theme for testing
        - rm -rf ${DOCROOT}/themes/contrib/govcms8_uikit_starter
        - git clone -b $TUGBOAT_GITHUB_BASE https://github.com/tobybellwood/govcms8_uikit_starter.git "${DOCROOT}/themes/custom/govcms8_uikit_starter"
        
        # Install the fresh GovCMS site and do not send email notification
        # - build/bin/phing -f build/phing/build.xml build:install
        - drush -r "${DOCROOT}" site-install govcms install_configure_form.update_status_module='array(FALSE,FALSE)' -y

      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy the files directory from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use rsync over SSH.
        # - rsync -av --delete user@example.com:/path/to/files/ "${DOCROOT}/sites/default/files/"
        - mkdir -p "${DOCROOT}/sites/default/files"
        - chgrp -R www-data "${DOCROOT}/sites/default/files"
        - find "${DOCROOT}/sites/default/files" -type d -exec chmod 2775 {} \;
        - find "${DOCROOT}/sites/default/files" -type f -exec chmod 0664 {} \;

        # Create a simpletest directory
        - mkdir -p "${DOCROOT}/sites/simpletest"
        - chgrp www-data "${DOCROOT}/sites/simpletest"
        - chmod 2775 "${DOCROOT}/sites/simpletest"

        # Alternatively, another common practice is to use the
        # stage_file_proxy Drupal module. This module lets Drupal serve
        # files from another publicly-accessible Drupal site instead of
        # syncing the entire files directory into the Tugboat Preview.
        # This results in smaller previews and reduces the build time.
        # - drush -r "${DOCROOT}" pm-download stage_file_proxy
        # - drush -r "${DOCROOT}" pm-enable --yes stage_file_proxy
        # - drush -r "${DOCROOT}" variable-set stage_file_proxy_origin "http://www.example.com"

      # Commands that build the site. This is where you would add things
      # like feature reverts or any other drush commands required to
      # set up or configure the site. When a preview is built from a
      # base preview, the build workflow starts here, skipping the init
      # and update steps, because the results of those are inherited
      # from the base preview.
      build:
        - drush -r "${DOCROOT}" cache-rebuild
        - drush -r "${DOCROOT}" updb -y

  # What to call the service hosting MySQL. This name also acts as the
  # hostname to access the service by from the php service.
  mysql:
    # Use the latest available 5.x version of MySQL
    image: tugboatqa/mysql:5

    # A set of commands to run while building this service
    commands:
      # Commands that import files, databases,  or other assets. When an
      # existing preview is refreshed, the build workflow starts here,
      # skipping the init step, because the results of that step will
      # already be present.
      update:
        # Copy a database dump from an external server. The public
        # SSH key found in the Tugboat Repository configuration must be
        # copied to the external server in order to use scp.
        # - scp user@example.com:database.sql.gz /tmp/database.sql.gz
        # - zcat /tmp/database.sql.gz | mysql tugboat
        # - rm /tmp/database.sql.gz
